{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.16299}\viewkind4\uc1 
\pard\f0\fs22\lang1033\par
WELCOME TO DROIDS 1.20\par
\par
Our main goal is to try to visualize the impact of one of the longest time scale processes in the universe (i.e molecular evolution over 100s millions of years) on one of the shortest time scale processes (i.e. molecular motion over femtoseconds). To achieve this goal we use state-of-the-art biophysical simulations and graphics to design a gaming PC into a computational microscope that is capable seeing how mutations and other molecular events like binding, bending and bonding affect the functioning of proteins and nucleic acids. If you find this idea exciting, consider joining our coding efforts on GitHub. DROIDS-1.20 (Detecting Relative Outlier Impacts in molecular Dynamic Simulation) is a GUI-based pipeline that works with AMBER16, Chimera 1.11 and CPPTRAJ to analyze and visualize comparative protein dynamics on GPU accelerated Linux graphics workstations.  DROIDS employs a statistical method (multiple test corrected KS tests on all backbone atoms of each amino acid) to detect significant changes in molecular dynamics simulated on two homologous PDB structures.  Quantitative differences in atom fluctuation (i.e. calculated from vector trajectories) are displayed graphically and mapped onto movie images of the protein dynamics at the level of individual residues.  P values indicating significant changes are also able to be similarly mapped.  DROIDS is useful for examining how mutations, epigenetic changes, or binding interactions affect protein dynamics. DROIDS was produced by student effort at the Rochester Institute of Technology under the direction of Dr. Gregory A. Babbitt as a collaborative project between the Gosnell School of Life Sciences and the Biomedical Engineering Dept.  Visit our lab website ({{\field{\*\fldinst{HYPERLINK https://people.rit.edu/gabsbi/ }}{\fldrslt{https://people.rit.edu/gabsbi/\ul0\cf0}}}}\f0\fs22 ) and download DROIDS 1.20 from Github at {{\field{\*\fldinst{HYPERLINK https://github.com/gbabbitt/DROIDS-1.0 }}{\fldrslt{https://github.com/gbabbitt/DROIDS-1.0\ul0\cf0}}}}\f0\fs22 . We will be posting video results periodically on our youtube channel at {{\field{\*\fldinst{HYPERLINK https://www.youtube.com/channel/UCJTBqGq01pBCMDQikn566Kw }}{\fldrslt{https://www.youtube.com/channel/UCJTBqGq01pBCMDQikn566Kw\ul0\cf0}}}}\f0\fs22  \par
\par
INSTALLATION INSTRUCTIONS FOR DROIDS v1.20\par
\par
DROIDS is primarily a backend statistical analysis and visualization tool for comparative protein dynamics. Some very fine tools already exist for running GPU accelerated molecular dynamic (MD) simulation, vector trajectory analysis, and visualizing structures.  Our philosophy is not to reinvent these tools but rather to create a user friendly GUI-based pipeline to enable these tools to be used in concert to statistically compare the stability of motion on the polypeptide backbone for two homologous structures.\par
\par
DROIDS requires a Linux OS with one or two high end CUDA enabled GPU graphics cards installed.  As of 2018, our preferred GPU is the GeForce GTX 1080 card with roughly 2500 cores.  With two of these installed, most single chain protein comparisons can be run in 12-48 hours. For very small structures, the program 'sander' in Ambertools17 can be called in place of pmemd.cuda and run without needing GPUs or the Amber16 license.  To enable this, the user can rewrite the following lines below in MD_proteinReference.pl, MD_proteinQuery.pl, MD_proteinReference_dualGPU.pl, MD_proteinQuery_dualGPU.pl replacing "pmemd.cuda_SPFP" with "sander".  Given the efficiency of modern GPU acceleration for MD, this is not generally recommended. \par
\par
\par
my $run_method = "pmemd1.cuda_SPFP"; # "sander" for CPU or "pmemd.cuda" for GPU;\par
my $method_ID = "pmemd1";\par
\par
\par
The primary software tools that must be installed on the Linux platform are\par
\par
Chimera 1.11 or later\par
Amber16\par
Ambertools17 (this will also give cpptraj)\par
CUDA 8.0\par
R-base language with the R packages 'ggplot2' and 'gridExtra'\par
Perl 5.12 or later\par
Python 2.7 or later (not python 3.0)\par
perl-tk\par
python-tk\par
python-gi\par
evince (a Linux pdf viewer)\par
\par
We highly recommend Linux Mint OS over Ubuntu as it provides more direct guidance via GUI for updating GPU graphics drivers when building the system. Generally, upon installation of the GPUs, the onboard graphics (on the motherboard) must be disabled via the BIOS or physical jumper and the monitor cable moved to the GPU card.  In Linux Mint, the system will recommend driver updates upon rebooting via a pop-up GUI.  In Ubuntu, the user usually needs to go to console (ctrl+alt+F1/F7), disable the x driver (e.g. sudo service lightdm stop/start), and install driver updates from the command line as root user. \par
 \par
Once the GPU and graphics are properly configured, then the CUDA libraries must be installed (use CUDA 8.0 or higher)\par
\par
...FIRST get some dependencies\par
\par
$ sudo apt-get install csh flex patch gfortran g++ make xorg-dev bison libbz2-dev \par
\par
\par
...TO INSTALL CUDA FROM LINUX CONSOLE\par
\par
...PRE-INSTALLATION\par
$ lspci | grep -i nvidia  # check for GPU\par
$ gcc --version   # must be v4.9 or lower for AMBER14\par
$ uname -r   # check kernel          \par
$ sudo apt-get install linux-headers-$(uname -r)   # to install kernel headers if needed (usually can skip this)\par
\par
...INSTALLATION from CONSOLE (first go to NVIDIA and download CUDA 8.0 for Linux to your desktop)\par
$ ctrl+alt+F1 then login\par
$ cd Desktop\par
$ sudo sh NVIDIA-Linux-x86_64-367.57.run  # 1080 driver if needed...refuse generally\par
$ sudo sh cuda_8.0.44_linux.run           # CUDA plus drivers NOTE: do not install from terminal\par
$ ctl ctrl+alt+F8\par
# RUN deviceQuery in CUDA SAMPLES under UTILITIES\par
\par
...POST INSTALLATION\par
TO SET CUDA ENV in .bashrc file\par
$ export CUDA_HOME=/usr/local/cuda-8.0\par
$ export PATH=$CUDA_HOME/bin:/usr/local/cuda-8.0/bin:$PATH\par
$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$\{AMBERHOME\}/lib:$CUDA_HOME/lib64:$CUDA_H$\par
\par
...CHECK YOUR GPU - here you should see your GPU hardware details\par
$ nvidia-smi\par
\par
if you have problems at this point, double check to make sure you have all CUDA developer tools installed\par
\par
\par
################################################################################\par
\par
...TO INSTALL AMBER16 and AMBERTOOLS17 (Amber16 must be purchased from \par
\par
...quoting from the AMBER developers\par
\par
"The resulting file, "Amber16.tar.bz2" is about 62 Mbytes in size, and must be\par
uncompressed with bunzip2, and extracted with "tar".  On most systems, the\par
command 'tar xvfj Amber16.tar.bz2' should work.\par
\par
[Specifically, the size of the file should be 62444314 bytes, and the\par
md5sum should be 2d52556093a8c878b64f35b2ac2aae20.]\par
\par
Please note: you also need to download and extract AmberTools16 from this\par
site:\par
      {{\field{\*\fldinst{HYPERLINK http://ambermd.org/AmberTools16-get.html }}{\fldrslt{http://ambermd.org/AmberTools16-get.html\ul0\cf0}}}}\f0\fs22\par
\par
Both Amber16 and AmberTools16 should be extracted into the same directory\par
tree, whose head will be 'amber16'.  [Please do *not* extract these files\par
into an existing 'amber12' or 'amber14' directory.]\par
\par
If you have problems with the download itself, please send email to\par
amber-license@biomaps.rutgers.edu.  If you have questions or problems about\par
installing or running the codes, please subscribe to the amber mailing list,\par
as described at {{\field{\*\fldinst{HYPERLINK http://lists.ambermd.org/mailman/listinfo/amber }}{\fldrslt{http://lists.ambermd.org/mailman/listinfo/amber\ul0\cf0}}}}\f0\fs22 ."\par
###############################################################################\par
\par
...FIRST CHECK for CUDA and C compilers\par
$ nvcc -V \par
$ gcc --version\par
...install compilers if necessary\par
\par
...TO INSTALL AMBERTOOLS16/17\par
$ cd Desktop\par
$ tar jxvf AmberTools17.tar.bz2    # note: dont do this as root user\par
$ cd amber16\par
$ export AMBERHOME=`pwd`\par
$ ./configure -noX11 gnu\par
     # We recommend you say "yes" when asked to apply updates\par
$ source amber.sh # Use amber.csh if you use tcsh or csh\par
$ make install\par
$ echo "source $AMBERHOME/amber.sh" >> ~/.bashrc  # Add Amber to your  environment\par
$ make test\par
\par
...TO INSTALL AMBER16 # for pmemd.cuda\par
$ cd Desktop\par
$ tar jxvf Amber16.tar.bz2   # note dont untar, configure or install as root\par
$ cd $AMBERHOME\par
$ ./configure -cuda gnu\par
$ make install\par
$ make test\par
\par
IMPORTANT - IF YOU PLAN ON RUNNING DROIDS ON 2 GPUs.\par
Go to the Amber16/bin file and copy the pmemd.cuda file twice and rename these files\par
\par
pmemd0.cuda\par
pmemd1.cuda\par
\par
NOTE: do not use SLI connection between cards. The script GUI_START_DROIDS_dualGPU.pl will send\par
the protein query simulation to the CUDA device = 0 and the protein reference simulation to CUDA device = 1 \par
 \par
\par
\par
\par
NOW YOU MUST MAKE SURE YOUR ENVIRONMENT IS SET\par
...open .bashrc in gedit \par
\par
$gedit .bashrc\par
\par
...at this point you should see a large text file with your initial boot up conditions\par
you need to add the following lines below to the botton of the script and save and exit\par
\par
...EXAMPLE .bashrc lines to add\par
\par
source /home/gabsbi/Desktop/amber16/amber.sh\par
export AMBERHOME=/home/gabsbi/Desktop/amber16\par
export PATH=$PATH:$AMBERHOME/bin\par
\par
export CUDA_HOME=/usr/local/cuda-8.0\par
export PATH=$CUDA_HOME/bin:/usr/local/cuda-8.0/bin:$PATH\par
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$\{AMBERHOME\}/lib:$CUDA_HOME/lib64:$CUDA_H$\par
\par
\par
\par
...Now CHECK system state GPU on 30 second loop\par
$ nvidia-smi -l 30\par
$ ctrl+C\par
\par
...CHECK system processes\par
$ top\par
$ ctrl+C\par
\par
...NOW INSTALL YOUR OTHER STUFF\par
\par
$ sudo apt-get install perl-tk\par
$ sudo apt-get install python-tk\par
$ sudo apt-get install python-gi\par
$ sudo apt-get install krusader (optional - a useful file transfer GUI)\par
$ sudo apt-get install evince\par
\par
...download Chimera (Linux version) from the the current UCSF Chimera website\par
$ cd Desktop\par
$ sudo ./chimera-1.11-linux_x86_64.bin  (make sure the permissions on this file are set to run it as executable after the download)\par
also untar and install Komodo Edit 10 from ActiveState's website if you would like a nice free editor for opening scripts\par
\par
\par
...TO INSTALL R and R STUDIO \par
\par
$ sudo apt-get install r-base r-base-dev\par
\par
...IF YOU LIKE Rstudio (optional)\par
$ sudo apt-get install gdebi-core\par
$ wget {{\field{\*\fldinst{HYPERLINK https://download1.rstudio.org/rstudio-0.99.896-amd64.deb }}{\fldrslt{https://download1.rstudio.org/rstudio-0.99.896-amd64.deb\ul0\cf0}}}}\f0\fs22\par
$ sudo gdebi -n rstudio-0.99.896-amd64.deb\par
$ rm rstudio-0.99.896-amd64.deb\par
\par
...TO GET ggplot2 package\par
\par
...open R on command line\par
\par
$ R\par
\par
...then type \par
\par
>install.packages("ggplot2")\par
\par
...and follow directions\par
\par
>install.packages("gridExtra")\par
\par
...and follow directions\par
\par
NOTE: teLeap_proteinQuery and teLeap_proteinReference have hard coded paths to the forcefield libraries in Amber16 ($AMBERHOME). You will need to change these to match the path on your system. \par
\par
########################################################\par
...TO START DROIDS from terminal (on single GPU)\par
\par
$ perl GUI_START_DROIDS.pl\par
\par
...TO START DROIDS from terminal (on two GPU)\par
\par
$ perl GUI_START_DROIDSdual GPU.pl\par
########################################################\par
\par
\par
}
 